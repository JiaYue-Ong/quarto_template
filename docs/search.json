[
  {
    "objectID": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html",
    "href": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "",
    "text": "In recent years, Amsterdam has emerged as one of Europe’s most dynamic short-term rental markets, with Airbnb becoming the preferred accommodation choice for many of the city’s 20 million annual visitors. International travelers increasingly choose Airbnb over traditional hotels, attracted by the superior value for money, authentic local experiences, and the flexibility to stay in Amsterdam’s iconic canal houses and historic neighborhoods. For visitors, Airbnb typically offers more space and amenities at a lower cost per night than comparable hotel rooms, while providing unique opportunities to experience the city like a local.\nFrom the host perspective, Airbnb has opened up new opportunities for Amsterdam residents to generate supplemental income from their properties. Hosts can offset their high housing costs in one of Europe’s most expensive real estate markets, with many earning significant side income during peak tourist seasons. The platform’s popularity has created a vibrant marketplace where both occasional hosts sharing spare rooms and property owners offering entire apartments can thrive.\nHowever, navigating this market presents unique challenges due to Amsterdam’s comprehensive regulatory framework, which aims to balance tourism with residential housing needs. The most significant regulation affecting Airbnb hosts is the 30-day annual rental limit, introduced to preserve neighborhood character and housing availability for residents. This differs markedly from traditional long-term rentals, which operate under rent control systems with points-based maximum prices, and hotel accommodations, which face separate commercial licensing requirements. For Airbnb hosts, this 30-day constraint makes optimal pricing strategy crucial – each available day must be priced effectively to maximize returns while remaining competitive. While Airbnb offers its “Smart Pricing” feature, recent research has highlighted its limitations. A 2024 study analyzing 26 U.S. regions found that algorithmic pricing often fails to account for local market dynamics and regulations (Lin & Yang, 2024). Similarly, research across European markets indicates that successful pricing strategies must consider both hyperlocal factors and seasonal variations (Toader, 2021).\nOur analysis leverages comprehensive Amsterdam Airbnb data from December 2018 to December 2019, encompassing over 20,000 listings with detailed property characteristics, daily pricing patterns, and neighborhood factors. By combining this with local market insights and regulatory constraints, we’ve developed a data-driven approach to help hosts optimize their pricing strategies.\nThis web-based app serves two primary audiences:\n\nNew hosts entering the market who need guidance on setting competitive initial prices while complying with local regulations\nExperienced hosts looking to optimize their pricing strategy for maximum returns within the 30-day annual limit, particularly during high-demand periods\n\nThrough advanced statistical modeling and machine learning techniques, our analysis provides actionable insights for hosts to make informed pricing decisions in Amsterdam’s unique short-term rental market. What follows is a detailed examination of the factors that influence Airbnb pricing in Amsterdam and our methodology for developing optimal pricing strategies within the regulatory framework."
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#libraries-setup",
    "href": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#libraries-setup",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "Libraries Setup",
    "text": "Libraries Setup\n\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(spdep)\nlibrary(caret)\nlibrary(ckanr)\nlibrary(FNN)\nlibrary(grid)\nlibrary(gridExtra)\nlibrary(ggcorrplot)\nlibrary(lubridate)\nlibrary(readr)\nlibrary(viridis)\nlibrary(MASS)\nlibrary(pander)\n\n#Functions\nsource(\"https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r\")"
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#data-preparation",
    "href": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#data-preparation",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "Data Preparation",
    "text": "Data Preparation\nOur analysis is built on comprehensive Airbnb data from Amsterdam, sourced from two key Kaggle datasets:\n\nCalendar.csv: Contains daily pricing and availability information for each listing\nListings_details.csv: Provides detailed property characteristics including location, amenities, and room configurations\n\nWe merged these datasets to create a complete view of each property, combining daily pricing data with property features. This allowed us to analyze how factors like number of bathrooms, neighborhood location, and seasonal timing affect listing prices. To ensure our analysis accurately represents Amsterdam’s regulated home-sharing market, we applied several careful filtering steps:\n\nRemoved commercial properties (hotels and B&Bs) as they operate under different regulations\nExcluded listings with minimum stay requirements over 32 days to align with Amsterdam’s 30-day annual rental limit\nFiltered out listings priced above €1,100 to eliminate outliers and focus on typical market rates\n\nThis data cleaning process ensures our model reflects the reality faced by individual hosts operating within Amsterdam’s regulatory framework, making our pricing recommendations more relevant and applicable.\n\n# Amsterdam Neighborhood\nneighborhood.sf &lt;- st_read(\"airbnbdata/neighbourhoods.geojson\")\n\n# Date of listings\ncalendar &lt;- read.csv(\"calendar.csv\")\ncalendar2&lt;-calendar[calendar$available==\"t\",] # Select only dates when listings were rented out\ncalendar2$date&lt;-dmy(calendar2$date)\nrange(calendar2$date) # We are only left with 2019 after cleaning \n\n# Detail of listing\nlistings_all&lt;-read.csv(\"listings_details.csv\")\nlength(unique(listings_all$id)) # Confirm number of unique values in listing\n\nlistings&lt;-listings_all %&gt;%\n  dplyr::select(\"id\",\n                \"name\",\n                \"host_id\",\n                \"host_name\",\n                \"neighbourhood_cleansed\",\n                \"latitude\",\n                \"longitude\",\n                \"property_type\",\n                \"room_type\",\n                \"accommodates\",\n                \"bathrooms\",\n                \"bedrooms\",\n                \"price\",\n                \"minimum_nights\",\n                \"number_of_reviews\",\n                \"last_review\",\n                \"reviews_per_month\",\n                \"calculated_host_listings_count\",\n                \"availability_365\",\n                starts_with(\"review_scores_\")\n                )\n\n# Join listing\nairbnb_joined &lt;- left_join(calendar2, listings, by=c(\"listing_id\" = \"id\"))\nairbnb_joined$price.y&lt;-parse_number(airbnb_joined$price.y)\nairbnb_joined$price.x&lt;-parse_number(airbnb_joined$price.x)\n\nairbnb_joined_clean &lt;- airbnb_joined %&gt;%\n  # Remove listings that are not regulated by 30 days rule (i.e., hotels)\n  filter(!(property_type %in% c(\"Bed and breakfast\", \"Boutique hotel\", \"Cabin\", \"Chalet\", \"Hotel\"))) %&gt;% \n  filter(minimum_nights&lt; 32) %&gt;%\n  # Remove extreme values (outliers)\n  filter(price.y &lt; 1100) %&gt;%\n  filter(price.x &lt; 1100)"
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#seasonal-price-patterns",
    "href": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#seasonal-price-patterns",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "Seasonal Price Patterns",
    "text": "Seasonal Price Patterns\nOur time-series analysis reveals complex temporal dynamics in Amsterdam’s Airbnb market through both listing volume and pricing patterns. The data shows a general upward trend in available listings throughout the year, growing from approximately 200 listings in December to over 800 by year-end, with notable fluctuations during spring months and more stability during summer.\nPricing patterns demonstrate significant seasonality, with the highest volatility observed in early months where prices spike to €250, followed by a notable peak around €225 in May coinciding with spring tourism and flower season. The summer months (June-August) maintain relatively stable pricing around €190-200, before showing a gradual decline from September onwards to winter levels of €170-180. This inverse relationship between listing volume and average prices is particularly interesting - as the number of listings increases throughout the year, we observe a general downward trend in average prices, suggesting increased market competition.\nThese patterns provide valuable insights for hosts: they can capitalize on higher pricing potential during spring events and summer peak season, while considering more competitive pricing strategies during winter months when both demand and average prices are lower. The data also reveals strategic opportunities for timing new listings or adjusting prices based on seasonal supply-demand dynamics, particularly during transition periods between high and low seasons.\n\n# Time-series of counts against date (may remove bc not very useful)\nairbnb_joined_clean %&gt;%\n  group_by(date) %&gt;%\n  summarize(count = n()) %&gt;%\n  ggplot(aes(x = date, y = count)) +\n  geom_line(color = \"steelblue\") +\n  labs(title = \"Number of Listings Over Time\", x = \"Date\", y = \"Count of Listings\") +\n  theme_minimal()+\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%b-%d\")\n\n\n\n\n\n\n\n# Time-series of average prices against date\nairbnb_joined_clean %&gt;%\n  group_by(date) %&gt;%\n  summarize(mean_price = mean(price.x, na.rm = TRUE)) %&gt;%\n  ggplot(aes(x = date, y = mean_price)) +\n  geom_line(color = \"steelblue\") +\n  labs(title = \"Average price of Listings Over Time\", x = \"Date\", y = \"Average price of Listings\") +\n  theme_minimal()+\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%b-%d\")\n\n\n\n\n\n\n\n\n\nnon_date_columns &lt;- setdiff(names(airbnb_joined_clean), c(\"listing_id\", \"date\"))\n\nconsistency_check &lt;- airbnb_joined_clean %&gt;%\n  group_by(listing_id) %&gt;%\n  summarize(across(all_of(non_date_columns), ~ n_distinct(.) == 1))\n\nprint(consistency_check)\n\n# Extact out weekdays, weekends, and months\nairbnb_joined_clean$day_of_week &lt;- weekdays(airbnb_joined_clean$date)\nairbnb_joined_clean$day_of_week &lt;- factor(airbnb_joined_clean$day_of_week, \n                                          levels = c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"))\n\nairbnb_joined_clean$weekend &lt;- ifelse(airbnb_joined_clean$day_of_week %in% c('Saturday', 'Sunday'), 'Weekend', 'Weekday')\n\nairbnb_joined_clean$month &lt;- format(airbnb_joined_clean$date, \"%B\")\nairbnb_joined_clean$month &lt;- factor(airbnb_joined_clean$month, \n                                    levels = c(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n                                               \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"))\n\n# Create airbnb shapefile\nairbnb_joined_clean_sf&lt;- st_as_sf(airbnb_joined_clean, coords = c(\"longitude\", \"latitude\"), crs = 4326)"
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#property-characteristics-and-their-impact",
    "href": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#property-characteristics-and-their-impact",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "Property Characteristics and Their Impact",
    "text": "Property Characteristics and Their Impact\nWe also examined several key property features that influence pricing:\nPhysical Characteristics:\n\nAccommodates: The total number of guests a property can host, a fundamental driver of pricing\nBathrooms: The number of bathrooms available, often a luxury indicator in city apartments\nBedrooms: The bedroom count, which strongly correlates with overall space and privacy options\n\nQuality Indicators:\n\nOverall Rating: The property’s aggregate review score\nAccuracy: How well the listing matches reality\nCleanliness: The property’s hygiene and maintenance standards\nCheck-in: Ease of the arrival process\nCommunication: Host responsiveness and clarity\nLocation: Convenience and desirability of the area\nValue: Guests’ perception of price versus quality\n\nOur analysis showed that physical characteristics – particularly capacity, bathroom count, and bedroom number – have the strongest correlation with pricing. While quality indicators matter, they show less direct impact on price variations.\nLocation and Property Types:\nThe most striking price variations emerged from two key factors, as shown in the map and charts that reveals ‘Mean Price of Listings by Property Type’:\n\nNeighborhood location: Different areas of Amsterdam command significantly different price points, reflecting their unique character and proximity to attractions\nProperty type: Whether it’s a cozy apartment, traditional canal house, or modern studio significantly influences pricing\n\nInterestingly, while we observed substantial price differences across neighborhoods and property types, daily and monthly variations were more subtle. This suggests that location and property characteristics might be more crucial for baseline price setting than seasonal adjustments.\n\n# Correlation plot\nnumericVars &lt;- airbnb_joined_clean %&gt;%\n  dplyr::select(\"price.x\",\n                \"accommodates\",\n                \"bathrooms\",\n                \"bedrooms\",\n                \"minimum_nights\",\n                starts_with(\"review_scores_\")) %&gt;%\n  na.omit()\n\nggcorrplot(\n  round(cor(numericVars), 2), \n  p.mat = cor_pmat(numericVars),\n  colors = c(\"#6D9EC1\", \"white\", \"#E46726\"),  # Better color scheme\n  type = \"lower\",\n  insig = \"blank\",\n  sig.level = 0.05,\n  lab = TRUE,\n  lab_size = 2,            \n  tl.cex = 6,              \n  tl.srt = 45,             \n  show.legend = TRUE,\n  legend.title = \"Correlation\",\n  ggtheme = ggplot2::theme_minimal() +\n    theme(\n      axis.text.x = element_text(angle = 45, hjust = 1),\n      axis.text.y = element_text(size = 8),\n      plot.title = element_text(hjust = 0.5)\n    )\n) +\nlabs(title = \"Correlation across numeric variables\")\n\n\n\n\n\n\n\n# Price as a function of continuous variables\nairbnb_joined_clean %&gt;% \n  dplyr::select(\"price.x\", \n                \"accommodates\", \n                \"bathrooms\", \n                \"bedrooms\", \n                \"minimum_nights\",\n                starts_with(\"review_scores_\")) %&gt;%\n  gather(Variable, Value, -price.x) %&gt;% \n  ggplot(aes(Value, price.x)) +\n    geom_point(size = 0.3, alpha = 0.4, color = \"steelblue\") + \n    geom_smooth(method = \"lm\", se = FALSE, colour = \"#FA7800\", size = 1) +\n    facet_wrap(~Variable, ncol = 3, scales = \"free_x\") +\n    labs(title = \"Price as a Function of Property Characteristics\",\n         x = \"Value\",\n         y = \"Listing Price (€)\") +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(size = 14, hjust = 0.5),\n      panel.grid.minor = element_blank(),\n      strip.text = element_text(size = 10)\n    ) +\n    scale_y_continuous(labels = scales::dollar_format(prefix = \"€\"))\n\n\n\n\n\n\n\n# Average prices by neighborhood (bar chart)\nairbnb_joined_clean %&gt;%\n  group_by(neighbourhood_cleansed) %&gt;%\n  summarize(mean_price = mean(price.x, na.rm = TRUE)) %&gt;%\n  ggplot(aes(x = neighbourhood_cleansed, y = mean_price)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Mean Price of Listings by Neighborhood\", x = \"Neighborhood\", y = \"Mean Price\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))+\n  coord_flip()\n\n\n\n\n\n\n\n# Average prices by neighborhood (map)\nneighborhood.sf &lt;- neighborhood.sf %&gt;%\n  left_join(airbnb_joined_clean %&gt;%\n              group_by(neighbourhood_cleansed) %&gt;%\n              summarize(mean_price = mean(price.x, na.rm = TRUE)),\n            by = c(\"neighbourhood\" = \"neighbourhood_cleansed\"))\n\nneighborhoods_centroids &lt;- st_centroid(neighborhood.sf)\nneighborhoods_centroids$neighbourhood &lt;- str_wrap(neighborhoods_centroids$neighbourhood, width = 12)\n\n# Create improved map\nggplot(data = neighborhood.sf) +\n  # Base map layer\n  geom_sf(aes(fill = mean_price),\n          color = \"white\",         # White borders between neighborhoods\n          size = 0.2) +           # Thinner borders\n  # Labels\n  geom_label(data = neighborhoods_centroids, \n             aes(label = neighbourhood, geometry = geometry),\n             stat = \"sf_coordinates\", \n             size = 2.5,          # Adjusted text size\n             color = \"black\", \n             fill = \"white\",\n             alpha = 0.8,         # Slightly transparent labels\n             label.size = 0.1,    # Thinner label borders\n             label.padding = unit(0.15, \"lines\")) +  # Less padding around text\n  # Color scale\n  scale_fill_gradient2(\n    low = \"#6D9EC1\",  # Blue\n    mid = \"white\",\n    high = \"#E46726\", # Orange\n    midpoint = mean(neighborhood.sf$mean_price, na.rm = TRUE),\n    labels = scales::dollar_format(prefix = \"€\"),\n    name = \"Mean Price\"\n) +\n  # Labels and title\n  labs(title = \"Mean Price of Listings by Neighborhood\",\n       caption = \"Data source: Airbnb Amsterdam\") +\n  # Theme customization\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    legend.position = \"right\",\n    legend.title = element_text(size = 10),\n    legend.text = element_text(size = 8),\n    axis.text = element_text(size = 8),\n    plot.caption = element_text(size = 8, hjust = 1),\n    panel.grid = element_blank()  # Remove background grid\n  ) +\n  # Proper aspect ratio\n  coord_sf(datum = NA)\n\n\n\n\n\n\n\n# Average prices by property type\nairbnb_joined_clean %&gt;%\n  group_by(property_type) %&gt;%\n  summarize(mean_price = mean(price.x, na.rm = TRUE)) %&gt;%\n  ggplot(aes(x = property_type, y = mean_price)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Mean Price of Listings by Property Type\", x = \"Neighborhood\", y = \"Mean Price\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))+\n  coord_flip()\n\n\n\n\n\n\n\n# Average prices by days and months\nairbnb_joined_clean %&gt;%\n  group_by(day_of_week, month) %&gt;%\n  summarize(mean_price = mean(price.x, na.rm = TRUE)) %&gt;%\n  ggplot(aes(x = day_of_week, y = mean_price)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Mean Price of Listings by Days and Months\", x = \"Neighborhood\", y = \"Mean Price\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))+\n  coord_flip() +\n  facet_wrap(~ month)\n\n\n\n\n\n\n\n\nFrom the charts and maps, we can see that our exploratory data analysis reveals several key patterns in Amsterdam’s Airbnb pricing dynamics. The correlation analysis shows that physical property characteristics have the strongest relationship with listing prices, with accommodation capacity (0.58), number of bedrooms (0.56), and bathroom count (0.43) showing moderate to strong positive correlations. Interestingly, review scores demonstrate surprisingly weak correlations with price (all below 0.3), suggesting that guest ratings have minimal impact on hosts’ pricing decisions. These relationships are further validated in our scatter plots, which show clear positive trends for physical characteristics but relatively flat relationships for review metrics.\nSpatial analysis through our neighborhood map visualization uncovers significant geographic variation in pricing patterns. Central Amsterdam neighborhoods, particularly Centrum-West and Centrum-Oost, consistently command premium prices, while peripheral areas such as Noord-Oost and the Bijlmer regions show notably lower average prices. This clear spatial pattern emphasizes the crucial role of location in determining Airbnb pricing strategies. Property type analysis reveals interesting market segmentation, with unique accommodations like lighthouses commanding the highest average prices (approximately €800), followed by serviced apartments (around €400) significantly outpricing standard apartments (about €200). Traditional properties such as regular apartments and houses cluster in the mid-price range, while smaller units like tiny houses and guesthouses consistently show lower price points.\nThese findings suggest that Amsterdam’s Airbnb pricing is primarily driven by three key factors: physical property characteristics, location centrality, and property uniqueness. Surprisingly, quality metrics as measured by guest reviews appear to play a lesser role in price determination. This understanding provides valuable insights for our subsequent feature engineering and modeling approaches, suggesting that focusing on physical and locational attributes might yield more predictive power than guest satisfaction metrics."
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#key-location-features-we-analyzed",
    "href": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#key-location-features-we-analyzed",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "Key Location Features We Analyzed",
    "text": "Key Location Features We Analyzed\nFirst, we have to think about this question: What Makes an Airbnb Attractive?\nDrawing from the rich open data provided by the Municipality of Amsterdam (maps.amsterdam.nl/open_geodata/), we delved deeper into what makes certain locations more appealing to guests. After all, your property’s value isn’t just about the space itself – it’s about the entire guest experience, from convenient transportation to feeling safe walking home at night.\nTransportation Accessibility\nWe measured how close properties are to tram and metro lines using a sophisticated k-nearest neighbor analysis (looking at the 1-5 closest stops). Our findings confirm what many hosts already know: properties closer to public transportation command higher prices. For every additional minute of walking distance to transport, we observed a gradual decrease in nightly rates.\nSafety and Lighting\nUsing detailed street lighting data, we analyzed the number of public lights within 165 feet (about a half block) of each property. Properties in well-lit areas tend to command slightly higher prices – a feature particularly valuable for guests who prioritize safety and comfort during evening hours.\nGreen Spaces\nWe calculated each property’s distance to the nearest park, recognizing that access to Amsterdam’s beautiful green spaces adds value to a visitor’s experience. Interestingly, while proximity to parks shows a positive correlation with prices, the effect is nuanced – suggesting that being near a park is just one of many factors guests consider.\nLocal Markets and Culture\nAmsterdam’s famous outdoor markets are more than just shopping destinations – they’re cultural landmarks. Our analysis tracked distances to these markets, revealing that properties within easy walking distance often achieve higher nightly rates. This reflects guests’ desire to experience local culture and have easy access to fresh food and unique shopping experiences.\nTourist Attractions\nWe mapped distances to major tourist attractions, finding that properties closer to these hotspots generally command premium prices. However, the relationship isn’t simply linear – some guests prefer being close enough to visit attractions easily while staying in quieter, more residential areas.\n\n# Tram and metro lines in Amsterdam\ntram_metro_19&lt;-st_read(\"https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=TRAMMETRO_PUNTEN_2019&THEMA=trammetro\")\n\n# Public lighting\npublic_lighting&lt;-st_read(\"https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=LICHTPUNTEN&THEMA=lichtpunten\") %&gt;%\n  dplyr::select(geometry)\n\n# Attraction 1: Parks\npark&lt;-st_read(\"https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=PARKPLANTSOENGROEN&THEMA=stadsparken\")\n\n# Attraction 2: Outdoor Markets\noutdoor_markets&lt;-st_read(\"https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=MARKTEN_AMBULANT&THEMA=markten\")\n\n# Attraction 3: Tourist Attractions\ntourist_attraction&lt;-st_read(\"https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=HISTORISCHE_BEBOUWING&THEMA=archeologie\")\n\n\nlistings.sf&lt;- st_as_sf(listings, coords = c(\"longitude\", \"latitude\"), crs = 4326)\n\n# Tram and metro lines in Amsterdam (k-nearest neighbor)\nlistings.sf &lt;-\n  listings.sf %&gt;% \n    mutate(\n      tpt_nn1 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tram_metro_19), k = 1),\n      \n      tpt_nn2 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tram_metro_19), k = 2), \n      \n      tpt_nn3 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tram_metro_19), k = 3), \n      \n      tpt_nn4 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tram_metro_19), k = 4), \n      \n      tpt_nn5 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tram_metro_19), k = 5))\n\n# Public lighting (buffer)\nlistings.sf$light.Buffer &lt;- listings.sf %&gt;%\n    st_buffer(165) %&gt;% #feet\n    aggregate(mutate(public_lighting, counter = 1),., sum) %&gt;%\n    pull(counter) %&gt;% \n  replace_na(0)\n\n# Attraction 1: Parks (nearest distance)\nlistings.sf$park.dist &lt;- as.numeric(st_distance(listings.sf, st_union(park)))\n\n# Attraction 2: Outdoor Markets (k-nearest neighbor)\nlistings.sf &lt;-\n  listings.sf %&gt;% \n    mutate(\n      mkt_nn1 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(outdoor_markets), k = 1),\n      \n      mkt_nn2 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(outdoor_markets), k = 2), \n      \n      mkt_nn3 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(outdoor_markets), k = 3), \n      \n      mkt_nn4 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(outdoor_markets), k = 4), \n      \n      mkt_nn5 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(outdoor_markets), k = 5))\n\n# Attraction 3: Tourist Attractions (k-nearest neighbor)\nlistings.sf &lt;-\n  listings.sf %&gt;% \n    mutate(\n      tour_nn1 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tourist_attraction), k = 1),\n      \n      tour_nn2 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tourist_attraction), k = 2), \n      \n      tour_nn3 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tourist_attraction), k = 3), \n      \n      tour_nn4 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tourist_attraction), k = 4), \n      \n      tour_nn5 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tourist_attraction), k = 5))\n\n\ncol1 &lt;- listings.sf %&gt;%\n  st_drop_geometry() %&gt;%\n  dplyr::select(id,starts_with(\"tpt_\"), park.dist, light.Buffer, starts_with(\"mkt_\"), starts_with(\"tour_\"))\n\nairbnb_joined_clean_sf &lt;- merge(airbnb_joined_clean_sf, col1, by.x = \"listing_id\", by.y = \"id\")"
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#what-this-means-for-hosts",
    "href": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#what-this-means-for-hosts",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "What This Means for Hosts",
    "text": "What This Means for Hosts\nWhile our statistical analysis showed relatively modest correlations between these features and prices, real-world experience and existing research suggest they do matter to guests. The key takeaways for hosts:\n\nTransport Proximity: Properties within a 5-10 minute walk of public transport tend to perform better\nSafety First: Well-lit neighborhoods can justify slightly higher rates\nGreen Appeal: Access to parks can be a valuable selling point, especially for longer stays\nLocal Experience: Proximity to markets and cultural spots can differentiate your listing\nTourist-Friendly: Being near attractions allows for premium pricing, but consider highlighting the perfect balance of accessibility and quiet your location offers"
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#initial-variable-selection",
    "href": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#initial-variable-selection",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "Initial Variable Selection",
    "text": "Initial Variable Selection\nTemporal Variables:\n\nDay of week\nWeekend/weekday binary\nMonthly seasonality\n\nProperty Characteristics:\n\nNeighborhood classification\nProperty type\nAccommodation capacity\nBathroom count\nBedroom count\nMinimum nights requirement\n\nSpatial Features:\n\nTransport accessibility (tpt_1, tpt_2, tpt_3, tpt_4, tpt_5)\nMarket proximity (mkt_1, mkt_2, mkt_3, mkt_4, mkt_5)\nTourist attraction density (tour_nn1, tour_nn2, tour_nn3, tour_nn4, tour_nn5)\nPark distance (park.dist)\nStreet lighting density within 165ft buffer (light.Buffer)\n\nTwo crucial variable exclusions shaped our modeling approach:\n\nReview Metrics: Excluded due to the inherent cold-start problem for new listings. This omission acknowledges that new hosts need pricing guidance before accumulating reviews.\nDate Variables: Removed in favor of cyclical temporal indicators (day of week, month) to capture recurring patterns rather than specific temporal events."
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#model-refinement",
    "href": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#model-refinement",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "Model Refinement",
    "text": "Model Refinement\nWe employed stepwise regression with AIC as our selection criterion to optimize the model specification. This approach systematically evaluates the marginal contribution of each predictor, yielding a more parsimonious final model while maintaining predictive power."
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#final-model-specification",
    "href": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#final-model-specification",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "Final Model Specification",
    "text": "Final Model Specification\nThe stepwise selection retained most of our initial variables with some refinement in the k-nearest neighbor terms:\nTemporal and Core Features:\n\nDay of week and monthly indicators\nNeighborhood effects\nProperty characteristics\nMinimum stay requirements\n\nRefined Spatial Metrics:\n\nTransport proximity (tpt_1, tpt_2, tpt_3, tpt_4)\nMarket accessibility (mkt_1, mkt_3, mkt_4)\nTourist attraction proximity (tour_nn1, tour_nn2, tour_nn3, tour_nn4, tour_nn5)\nPark distance (park.dist)\nLocal lighting density (light.Buffer)\n\n\n# Omit NA values from reviews\n#airbnb_joined_clean_sf &lt;- airbnb_joined_clean_sf %&gt;%\n#  filter(!if_any(starts_with(\"review_scores_\"), is.na)) # Remove NA so that AIC model can run (if i include review_scores in the equation. But also dont make sense since new host dont have info on review)\n\nset.seed(123)\n# Split data set\ninTrain &lt;- createDataPartition(\n              y = paste(airbnb_joined_clean_sf$neighbourhood_cleansed, \n                        airbnb_joined_clean_sf$property_type,\n                        airbnb_joined_clean_sf$minimum_nights), \n              p = .60, list = FALSE)\n\n\nairbnb.training &lt;- airbnb_joined_clean_sf[inTrain,] \nairbnb.test &lt;- airbnb_joined_clean_sf[-inTrain,] \n\n# Regression model\nreg&lt;-lm(price.x ~ ., data = as.data.frame(airbnb.training) %&gt;% \n                             dplyr::select(price.x,\n                                           day_of_week,\n                                           weekend,\n                                           month,\n                                           neighbourhood_cleansed,\n                                           property_type,\n                                           accommodates,\n                                           bathrooms,\n                                           bedrooms,\n                                           minimum_nights,\n                                           starts_with(\"tpt_\"),\n                                           starts_with(\"mkt_\"),\n                                           starts_with(\"tour_\"),\n                                           park.dist,\n                                           light.Buffer))\nsummary(reg)\n\n# Stepwise regression to remove unimportant variables\nstep &lt;- stepAIC(reg, direction=\"both\")\nstep$anova\n\n# New regression model\nreg2&lt;- lm(price.x ~ day_of_week + month + neighbourhood_cleansed + property_type + accommodates + \n    bathrooms + bedrooms + minimum_nights + tpt_nn1 + tpt_nn2 + \n    tpt_nn3 + tpt_nn4 + mkt_nn1 + mkt_nn3 + mkt_nn4 + \n    tour_nn1 + tour_nn2 + tour_nn3 + tour_nn4 + tour_nn5 + park.dist + \n    light.Buffer, data = as.data.frame(airbnb.training)) # The AIC Model\n\nreg2$coefficients[\"(Intercept)\"] &lt;- reg2$coefficients[\"(Intercept)\"]\n\nsummary(reg2)\n\n# Prediction\nairbnb.test &lt;-\n  airbnb.test %&gt;%\n  mutate(Regression = \"Baseline Regression\",\n         Price.Predict = predict(reg2, airbnb.test),\n         Price.Error = Price.Predict - price.x,\n         Price.AbsError = abs(Price.Predict - price.x),\n         Price.APE = (abs(Price.Predict - price.x)) / price.x)"
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#validation-accuracy-and-generalizability",
    "href": "MUSA-5080-Final-Project/MUSA_5080_Final_Project.html#validation-accuracy-and-generalizability",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "Validation: Accuracy and Generalizability",
    "text": "Validation: Accuracy and Generalizability\nFor a pricing model to be truly valuable in Amsterdam’s dynamic Airbnb market, it needs to be both accurate and generalizable. Accuracy ensures hosts can trust the day-to-day pricing recommendations, while generalizability ensures the model remains reliable across different seasons, neighborhoods, and market conditions.\n\n# MAE (Accuracy)\nmean(airbnb.test$Price.AbsError, na.rm = T)\n\n[1] 58.05745\n\nggplot(airbnb.test, aes(x = Price.AbsError)) +\n  geom_histogram(binwidth = 0.5, fill = \"blue\", color = \"orange\") +\n  labs(title = \"Histogram of Absolute Error\", x = \"Value\", y = \"Frequency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# MAPE (Accuracy)\nmean(airbnb.test$Price.APE, na.rm = T)\n\n[1] 0.3603723\n\n# Cross-validation (Generalizability)\nfitControl &lt;- trainControl(method = \"cv\", number = 100)\nset.seed(825)\n\nreg.cv &lt;- \n  train(price.x ~ ., data = st_drop_geometry(airbnb_joined_clean_sf) %&gt;% \n                                dplyr::select(price.x, \n                                day_of_week, month, neighbourhood_cleansed, property_type, accommodates, bathrooms, bedrooms,\n                                minimum_nights, tpt_nn1, tpt_nn2, tpt_nn3, tpt_nn4, mkt_nn1, mkt_nn3, mkt_nn4, tour_nn1,\n                                tour_nn2, tour_nn3, tour_nn4, tour_nn5, park.dist,light.Buffer), \n     method = \"lm\", trControl = fitControl, na.action = na.pass)\n\nmean(reg.cv$resample[,3])\n\n[1] 58.22711\n\nsd(reg.cv$resample[,3])\n\n[1] 1.332825\n\nreg.cv.df &lt;- data.frame(MAE=reg.cv$resample[,3])\n\nggplot(reg.cv.df, aes(x = MAE)) +\n  geom_histogram(binwidth = 0.5, fill = \"#83A598\") +\n  labs(title = \"Distribution of MAE\", subtitle = \"k-fold cross validation; k=100\", x = \"Value\", y = \"Count\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nMeasuring Prediction Accuracy\nTo assess our model’s performance, we examined both absolute and relative prediction accuracy. Our model achieved an MAE of 58.06, meaning that, on average, predictions deviate from actual prices by €58. The MAPE of 0.36 (36.0%) provides a relative view of this accuracy. While these metrics might suggest moderate accuracy, they’re reasonable given Amsterdam’s wide range of listing prices and the inherent volatility of short-term rental markets.\n\n\nTesting Generalizability\nWhile accuracy on known data is important, we’re particularly interested in how well our model performs on new, unseen data. To rigorously test this, we employed k-fold cross-validation with k=100, essentially testing our model 100 times on different subsets of our data.\nThe standard deviation of MAE across all 100 folds is remarkably low at 1.33, indicating strong model stability. This small variation suggests that our model’s performance is consistent across different subsets of the data, a crucial characteristic for reliable price predictions.\nWhy This Matters?\nThe balance between accuracy and generalizability is crucial for our use case. Hosts need reliable pricing guidance that works not just for today’s market but remains valid as conditions change. Our model’s moderate accuracy means it can provide realistic price ranges, while its strong generalizability ensures these recommendations remain reliable across different market conditions, seasons, and neighborhoods. This combination makes it a practical tool for both new hosts setting initial prices and experienced hosts adjusting their strategies throughout the year.\n\n\nExamining spatial variations\n\n# Predicted price as a function of observed price\nairbnb.test %&gt;%\n  dplyr::select(price.x, Price.Predict) %&gt;%\n  ggplot(aes(price.x, Price.Predict)) +\n  geom_point() +\n  stat_smooth(aes(price.x, price.x), \n             method = \"lm\", se = FALSE, size = 1, \n             colour = \"#FA7800\", linetype = \"dashed\") +  # Added dashed line\n  stat_smooth(aes(Price.Predict, price.x), \n              method = \"lm\", se = FALSE, size = 1, \n              colour = \"#83A598\") +\n  labs(title = \"Predicted airbnb price as a function of observed price\",\n       subtitle = \"Orange dashed line represents a perfect prediction; Green line represents prediction\") +\n  plotTheme()\n\n\n\n\n\n\n\n\nThe scatter plot compares our model’s predicted Airbnb prices with the actual observed prices, using an orange diagonal line to represent perfect predictions and a green line to show our model’s actual predictions.\nThe closeness of the green line to the orange dash line suggests reasonable overall prediction accuracy in our model. We observe different patterns across price ranges: for lower-priced properties (0-300€), the model performs well with predictions tightly clustered around the prediction line; in the mid-range (300-600€), we see more scatter but predictions still follow the general trend; for higher-priced properties (600€+), the model tends to underpredict, with more points falling below the perfect prediction line.\nNotably, the spread of points increases with price, indicating better model accuracy for lower-priced properties, while the model tends to underestimate very high prices (900€+). The visualization also shows that our model avoids extreme predictions, staying within reasonable price ranges. Overall, this suggests that while our model performs well for typical Amsterdam Airbnb prices, it might need refinement for luxury or premium properties.\n\n\nExamining Spatial Autocorrelation in Model Errors\nMoran’s I\nMoran’s I is a measure that tells us how similar or different our model’s prediction errors are across Amsterdam’s neighborhoods. We use it to check if our errors show any geographic patterns – in other words, are we consistently over- or under-predicting prices in certain areas of the city? If Moran’s I reveals strong patterns, it suggests our model might be missing important neighborhood-specific factors that influence pricing.\n\ncoords &lt;- jitter(st_coordinates(airbnb_joined_clean_sf),0.0001)\nneighborList &lt;- knn2nb(knearneigh(coords, 5))\nspatialWeights &lt;- nb2listw(neighborList, style=\"W\")\nairbnb_joined_clean_sf$lagPrice &lt;- lag.listw(spatialWeights, airbnb_joined_clean_sf$price.x)\n\nairbnb.test2 &lt;- airbnb.test %&gt;% na.omit() #Remove NA values\n\ncoords.test &lt;-  jitter(st_coordinates(airbnb.test2))\nneighborList.test &lt;- knn2nb(knearneigh(coords.test, 5))\nspatialWeights.test &lt;- nb2listw(neighborList.test, style=\"W\")\n\n\nmoranTest &lt;- moran.mc(airbnb.test2$Price.Error, \n                      spatialWeights.test, nsim = 999)\n\nggplot(as.data.frame(moranTest$res[c(1:999)]), aes(moranTest$res[c(1:999)])) +\n  geom_histogram(binwidth = 0.01) +\n  geom_vline(aes(xintercept = moranTest$statistic), colour = \"orange\",linewidth=1) +\n  scale_x_continuous(limits = c(-0.3, 0.3)) +\n  labs(title=\"Observed and permuted Moran's I\",\n       subtitle= \"Observed Moran's I in orange\",\n       x=\"Moran's I\",\n       y=\"Count\") +\n  theme_minimal() + \n  theme(plot.title = element_text(size=12, face=\"bold\"),\n        plot.subtitle = element_text(size=10),\n        panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\nIn our analysis, we observed a Moran’s I value of 0.273 with a p-value of 0.001. Looking at the visualization, the orange line represents our observed Moran’s I statistic, while the black bars show the distribution of what we’d expect if the errors were randomly distributed across Amsterdam. The fact that our orange line sits notably to the right of this distribution tells us something important: our prediction errors aren’t random across the city – they show significant positive spatial autocorrelation.\nThis clustering of errors suggests that when our model over- or under-predicts a property’s price, nearby properties are likely to have similar prediction errors. While the magnitude (0.273) indicates moderate spatial autocorrelation, the highly significant p-value (0.001) confirms that this pattern isn’t due to chance. This insight points to an opportunity to improve our model by incorporating additional neighborhood-specific features that might capture these spatial patterns more effectively.\nSpatial Lag of Airbnb Price Error\nThe spatial lag scatter plot provides another way to understand how our model’s prediction errors are related across space. The plot shows each property’s prediction error against the average error of its neighboring properties (the spatial lag). This helps us visualize whether properties with high or low prediction errors tend to be near other properties with similar errors.\n\nairbnb.test2 &lt;- airbnb.test2 %&gt;% \n  mutate(lagPriceError = lag.listw(spatialWeights.test, Price.Error))\n\nggplot(data = airbnb.test2)+\n  geom_point(aes(x =lagPriceError, y =Price.Error)) +\n  scale_y_continuous(label = scales::comma) +\n  scale_x_continuous(label = scales::comma) +\n  labs(title = \"Spatial lag of Airbnb Price Error\",\n       x = \"Lag of airbnb price error\",\n       y = \"Airbnb error\") +\n  theme_minimal() + \n  theme(plot.title = element_text(size=12, face=\"bold\"),\n        panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\nLooking at our scatter plot, we observe several key patterns:\n\nThe majority of points cluster around the center (0,0), indicating that many properties have relatively small prediction errors that don’t show strong spatial patterns\nThere’s a visible positive correlation between errors and their spatial lags, shown by the general upward trend of points from lower left to upper right\nWe see some distinct horizontal bands in the error distribution, particularly around -500 and 0, suggesting certain price ranges where our model consistently over- or under-predicts\n\nThis pattern reinforces our Moran’s I findings (0.273) by visually demonstrating that prediction errors aren’t randomly distributed across space. When we over-predict a property’s price, we’re likely to over-predict its neighbors’ prices too. This spatial clustering of errors suggests our model could be improved by:\n\nAdding more detailed neighborhood-level variables\nIncorporating interaction effects between spatial features\nConsidering non-linear relationships in our spatial variables"
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html",
    "href": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "",
    "text": "In recent years, Amsterdam has emerged as one of Europe’s most dynamic short-term rental markets, with Airbnb becoming the preferred accommodation choice for many of the city’s 20 million annual visitors. International travelers increasingly choose Airbnb over traditional hotels, attracted by the superior value for money, authentic local experiences, and the flexibility to stay in Amsterdam’s iconic canal houses and historic neighborhoods. For visitors, Airbnb typically offers more space and amenities at a lower cost per night than comparable hotel rooms, while providing unique opportunities to experience the city like a local.\nFrom the host perspective, Airbnb has opened up new opportunities for Amsterdam residents to generate supplemental income from their properties. Hosts can offset their high housing costs in one of Europe’s most expensive real estate markets, with many earning significant side income during peak tourist seasons. The platform’s popularity has created a vibrant marketplace where both occasional hosts sharing spare rooms and property owners offering entire apartments can thrive.\nHowever, navigating this market presents unique challenges due to Amsterdam’s comprehensive regulatory framework, which aims to balance tourism with residential housing needs. The most significant regulation affecting Airbnb hosts is the 30-day annual rental limit, introduced to preserve neighborhood character and housing availability for residents. This differs markedly from traditional long-term rentals, which operate under rent control systems with points-based maximum prices, and hotel accommodations, which face separate commercial licensing requirements. For Airbnb hosts, this 30-day constraint makes optimal pricing strategy crucial – each available day must be priced effectively to maximize returns while remaining competitive. While Airbnb offers its “Smart Pricing” feature, recent research has highlighted its limitations. A 2024 study analyzing 26 U.S. regions found that algorithmic pricing often fails to account for local market dynamics and regulations (Lin & Yang, 2024). Similarly, research across European markets indicates that successful pricing strategies must consider both hyperlocal factors and seasonal variations (Toader, 2021).\nOur analysis leverages comprehensive Amsterdam Airbnb data from December 2018 to December 2019, encompassing over 20,000 listings with detailed property characteristics, daily pricing patterns, and neighborhood factors. By combining this with local market insights and regulatory constraints, we’ve developed a data-driven approach to help hosts optimize their pricing strategies.\nThis web-based app serves two primary audiences:\n\nNew hosts entering the market who need guidance on setting competitive initial prices while complying with local regulations\nExperienced hosts looking to optimize their pricing strategy for maximum returns within the 30-day annual limit, particularly during high-demand periods\n\nThrough advanced statistical modeling and machine learning techniques, our analysis provides actionable insights for hosts to make informed pricing decisions in Amsterdam’s unique short-term rental market. What follows is a detailed examination of the factors that influence Airbnb pricing in Amsterdam and our methodology for developing optimal pricing strategies within the regulatory framework.",
    "crumbs": [
      "Amsterdam’s Airbnb Prices Predictor"
    ]
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#libraries-setup",
    "href": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#libraries-setup",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "Libraries Setup",
    "text": "Libraries Setup\n\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(spdep)\nlibrary(caret)\nlibrary(ckanr)\nlibrary(FNN)\nlibrary(grid)\nlibrary(gridExtra)\nlibrary(ggcorrplot)\nlibrary(lubridate)\nlibrary(readr)\nlibrary(viridis)\nlibrary(MASS)\nlibrary(pander)\n\n#Functions\nsource(\"https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r\")\n\n#Set working directory\nsetwd(\"~/02. MUSA Year 1/MUSA 5500- Geospatial Data Science in Python/quatro_jy/quarto_template/MUSA-5080-Final-Project\")",
    "crumbs": [
      "Amsterdam’s Airbnb Prices Predictor"
    ]
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#data-preparation",
    "href": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#data-preparation",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "Data Preparation",
    "text": "Data Preparation\nOur analysis is built on comprehensive Airbnb data from Amsterdam, sourced from two key Kaggle datasets:\n\nCalendar.csv: Contains daily pricing and availability information for each listing\nListings_details.csv: Provides detailed property characteristics including location, amenities, and room configurations\n\nWe merged these datasets to create a complete view of each property, combining daily pricing data with property features. This allowed us to analyze how factors like number of bathrooms, neighborhood location, and seasonal timing affect listing prices. To ensure our analysis accurately represents Amsterdam’s regulated home-sharing market, we applied several careful filtering steps:\n\nRemoved commercial properties (hotels and B&Bs) as they operate under different regulations\nExcluded listings with minimum stay requirements over 32 days to align with Amsterdam’s 30-day annual rental limit\nFiltered out listings priced above €1,100 to eliminate outliers and focus on typical market rates\n\nThis data cleaning process ensures our model reflects the reality faced by individual hosts operating within Amsterdam’s regulatory framework, making our pricing recommendations more relevant and applicable.\n\n# Amsterdam Neighborhood\nneighborhood.sf &lt;- st_read(\"airbnbdata/neighbourhoods.geojson\")\n\n# Date of listings\ncalendar &lt;- read.csv(\"calendar.csv\")\ncalendar2&lt;-calendar[calendar$available==\"t\",] # Select only dates when listings were rented out\ncalendar2$date&lt;-dmy(calendar2$date)\nrange(calendar2$date) # We are only left with 2019 after cleaning \n\n# Detail of listing\nlistings_all&lt;-read.csv(\"listings_details.csv\")\nlength(unique(listings_all$id)) # Confirm number of unique values in listing\n\nlistings&lt;-listings_all %&gt;%\n  dplyr::select(\"id\",\n                \"name\",\n                \"host_id\",\n                \"host_name\",\n                \"neighbourhood_cleansed\",\n                \"latitude\",\n                \"longitude\",\n                \"property_type\",\n                \"room_type\",\n                \"accommodates\",\n                \"bathrooms\",\n                \"bedrooms\",\n                \"price\",\n                \"minimum_nights\",\n                \"number_of_reviews\",\n                \"last_review\",\n                \"reviews_per_month\",\n                \"calculated_host_listings_count\",\n                \"availability_365\",\n                starts_with(\"review_scores_\")\n                )\n\n# Join listing\nairbnb_joined &lt;- left_join(calendar2, listings, by=c(\"listing_id\" = \"id\"))\nairbnb_joined$price.y&lt;-parse_number(airbnb_joined$price.y)\nairbnb_joined$price.x&lt;-parse_number(airbnb_joined$price.x)\n\nairbnb_joined_clean &lt;- airbnb_joined %&gt;%\n  # Remove listings that are not regulated by 30 days rule (i.e., hotels)\n  filter(!(property_type %in% c(\"Bed and breakfast\", \"Boutique hotel\", \"Cabin\", \"Chalet\", \"Hotel\"))) %&gt;% \n  filter(minimum_nights&lt; 32) %&gt;%\n  # Remove extreme values (outliers)\n  filter(price.y &lt; 1100) %&gt;%\n  filter(price.x &lt; 1100)",
    "crumbs": [
      "Amsterdam’s Airbnb Prices Predictor"
    ]
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#seasonal-price-patterns",
    "href": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#seasonal-price-patterns",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "Seasonal Price Patterns",
    "text": "Seasonal Price Patterns\nOur time-series analysis reveals complex temporal dynamics in Amsterdam’s Airbnb market through both listing volume and pricing patterns. The data shows a general upward trend in available listings throughout the year, growing from approximately 200 listings in December to over 800 by year-end, with notable fluctuations during spring months and more stability during summer.\nPricing patterns demonstrate significant seasonality, with the highest volatility observed in early months where prices spike to €250, followed by a notable peak around €225 in May coinciding with spring tourism and flower season. The summer months (June-August) maintain relatively stable pricing around €190-200, before showing a gradual decline from September onwards to winter levels of €170-180. This inverse relationship between listing volume and average prices is particularly interesting - as the number of listings increases throughout the year, we observe a general downward trend in average prices, suggesting increased market competition.\nThese patterns provide valuable insights for hosts: they can capitalize on higher pricing potential during spring events and summer peak season, while considering more competitive pricing strategies during winter months when both demand and average prices are lower. The data also reveals strategic opportunities for timing new listings or adjusting prices based on seasonal supply-demand dynamics, particularly during transition periods between high and low seasons.\n\n# Time-series of counts against date (may remove bc not very useful)\nairbnb_joined_clean %&gt;%\n  group_by(date) %&gt;%\n  summarize(count = n()) %&gt;%\n  ggplot(aes(x = date, y = count)) +\n  geom_line(color = \"steelblue\") +\n  labs(title = \"Number of Listings Over Time\", x = \"Date\", y = \"Count of Listings\") +\n  theme_minimal()+\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%b-%d\")\n\n\n\n\n\n\n\n# Time-series of average prices against date\nairbnb_joined_clean %&gt;%\n  group_by(date) %&gt;%\n  summarize(mean_price = mean(price.x, na.rm = TRUE)) %&gt;%\n  ggplot(aes(x = date, y = mean_price)) +\n  geom_line(color = \"steelblue\") +\n  labs(title = \"Average price of Listings Over Time\", x = \"Date\", y = \"Average price of Listings\") +\n  theme_minimal()+\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%b-%d\")\n\n\n\n\n\n\n\n\n\nnon_date_columns &lt;- setdiff(names(airbnb_joined_clean), c(\"listing_id\", \"date\"))\n\nconsistency_check &lt;- airbnb_joined_clean %&gt;%\n  group_by(listing_id) %&gt;%\n  summarize(across(all_of(non_date_columns), ~ n_distinct(.) == 1))\n\nprint(consistency_check)\n\n# Extact out weekdays, weekends, and months\nairbnb_joined_clean$day_of_week &lt;- weekdays(airbnb_joined_clean$date)\nairbnb_joined_clean$day_of_week &lt;- factor(airbnb_joined_clean$day_of_week, \n                                          levels = c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"))\n\nairbnb_joined_clean$weekend &lt;- ifelse(airbnb_joined_clean$day_of_week %in% c('Saturday', 'Sunday'), 'Weekend', 'Weekday')\n\nairbnb_joined_clean$month &lt;- format(airbnb_joined_clean$date, \"%B\")\nairbnb_joined_clean$month &lt;- factor(airbnb_joined_clean$month, \n                                    levels = c(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n                                               \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"))\n\n# Create airbnb shapefile\nairbnb_joined_clean_sf&lt;- st_as_sf(airbnb_joined_clean, coords = c(\"longitude\", \"latitude\"), crs = 4326)",
    "crumbs": [
      "Amsterdam’s Airbnb Prices Predictor"
    ]
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#property-characteristics-and-their-impact",
    "href": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#property-characteristics-and-their-impact",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "Property Characteristics and Their Impact",
    "text": "Property Characteristics and Their Impact\nWe also examined several key property features that influence pricing:\nPhysical Characteristics:\n\nAccommodates: The total number of guests a property can host, a fundamental driver of pricing\nBathrooms: The number of bathrooms available, often a luxury indicator in city apartments\nBedrooms: The bedroom count, which strongly correlates with overall space and privacy options\n\nQuality Indicators:\n\nOverall Rating: The property’s aggregate review score\nAccuracy: How well the listing matches reality\nCleanliness: The property’s hygiene and maintenance standards\nCheck-in: Ease of the arrival process\nCommunication: Host responsiveness and clarity\nLocation: Convenience and desirability of the area\nValue: Guests’ perception of price versus quality\n\nOur analysis showed that physical characteristics – particularly capacity, bathroom count, and bedroom number – have the strongest correlation with pricing. While quality indicators matter, they show less direct impact on price variations.\nLocation and Property Types:\nThe most striking price variations emerged from two key factors, as shown in the map and charts that reveals ‘Mean Price of Listings by Property Type’:\n\nNeighborhood location: Different areas of Amsterdam command significantly different price points, reflecting their unique character and proximity to attractions\nProperty type: Whether it’s a cozy apartment, traditional canal house, or modern studio significantly influences pricing\n\nInterestingly, while we observed substantial price differences across neighborhoods and property types, daily and monthly variations were more subtle. This suggests that location and property characteristics might be more crucial for baseline price setting than seasonal adjustments.\n\n# Correlation plot\nnumericVars &lt;- airbnb_joined_clean %&gt;%\n  dplyr::select(\"price.x\",\n                \"accommodates\",\n                \"bathrooms\",\n                \"bedrooms\",\n                \"minimum_nights\",\n                starts_with(\"review_scores_\")) %&gt;%\n  na.omit()\n\nggcorrplot(\n  round(cor(numericVars), 2), \n  p.mat = cor_pmat(numericVars),\n  colors = c(\"#6D9EC1\", \"white\", \"#E46726\"),  # Better color scheme\n  type = \"lower\",\n  insig = \"blank\",\n  sig.level = 0.05,\n  lab = TRUE,\n  lab_size = 2,            \n  tl.cex = 6,              \n  tl.srt = 45,             \n  show.legend = TRUE,\n  legend.title = \"Correlation\",\n  ggtheme = ggplot2::theme_minimal() +\n    theme(\n      axis.text.x = element_text(angle = 45, hjust = 1),\n      axis.text.y = element_text(size = 8),\n      plot.title = element_text(hjust = 0.5)\n    )\n) +\nlabs(title = \"Correlation across numeric variables\")\n\n\n\n\n\n\n\n# Price as a function of continuous variables\nairbnb_joined_clean %&gt;% \n  dplyr::select(\"price.x\", \n                \"accommodates\", \n                \"bathrooms\", \n                \"bedrooms\", \n                \"minimum_nights\",\n                starts_with(\"review_scores_\")) %&gt;%\n  gather(Variable, Value, -price.x) %&gt;% \n  ggplot(aes(Value, price.x)) +\n    geom_point(size = 0.3, alpha = 0.4, color = \"steelblue\") + \n    geom_smooth(method = \"lm\", se = FALSE, colour = \"#FA7800\", size = 1) +\n    facet_wrap(~Variable, ncol = 3, scales = \"free_x\") +\n    labs(title = \"Price as a Function of Property Characteristics\",\n         x = \"Value\",\n         y = \"Listing Price (€)\") +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(size = 14, hjust = 0.5),\n      panel.grid.minor = element_blank(),\n      strip.text = element_text(size = 10)\n    ) +\n    scale_y_continuous(labels = scales::dollar_format(prefix = \"€\"))\n\n\n\n\n\n\n\n# Average prices by neighborhood (bar chart)\nairbnb_joined_clean %&gt;%\n  group_by(neighbourhood_cleansed) %&gt;%\n  summarize(mean_price = mean(price.x, na.rm = TRUE)) %&gt;%\n  ggplot(aes(x = neighbourhood_cleansed, y = mean_price)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Mean Price of Listings by Neighborhood\", x = \"Neighborhood\", y = \"Mean Price\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))+\n  coord_flip()\n\n\n\n\n\n\n\n# Average prices by neighborhood (map)\nneighborhood.sf &lt;- neighborhood.sf %&gt;%\n  left_join(airbnb_joined_clean %&gt;%\n              group_by(neighbourhood_cleansed) %&gt;%\n              summarize(mean_price = mean(price.x, na.rm = TRUE)),\n            by = c(\"neighbourhood\" = \"neighbourhood_cleansed\"))\n\nneighborhoods_centroids &lt;- st_centroid(neighborhood.sf)\nneighborhoods_centroids$neighbourhood &lt;- str_wrap(neighborhoods_centroids$neighbourhood, width = 12)\n\n# Create improved map\nggplot(data = neighborhood.sf) +\n  # Base map layer\n  geom_sf(aes(fill = mean_price),\n          color = \"white\",         # White borders between neighborhoods\n          size = 0.2) +           # Thinner borders\n  # Labels\n  geom_label(data = neighborhoods_centroids, \n             aes(label = neighbourhood, geometry = geometry),\n             stat = \"sf_coordinates\", \n             size = 2.5,          # Adjusted text size\n             color = \"black\", \n             fill = \"white\",\n             alpha = 0.8,         # Slightly transparent labels\n             label.size = 0.1,    # Thinner label borders\n             label.padding = unit(0.15, \"lines\")) +  # Less padding around text\n  # Color scale\n  scale_fill_gradient2(\n    low = \"#6D9EC1\",  # Blue\n    mid = \"white\",\n    high = \"#E46726\", # Orange\n    midpoint = mean(neighborhood.sf$mean_price, na.rm = TRUE),\n    labels = scales::dollar_format(prefix = \"€\"),\n    name = \"Mean Price\"\n) +\n  # Labels and title\n  labs(title = \"Mean Price of Listings by Neighborhood\",\n       caption = \"Data source: Airbnb Amsterdam\") +\n  # Theme customization\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n    legend.position = \"right\",\n    legend.title = element_text(size = 10),\n    legend.text = element_text(size = 8),\n    axis.text = element_text(size = 8),\n    plot.caption = element_text(size = 8, hjust = 1),\n    panel.grid = element_blank()  # Remove background grid\n  ) +\n  # Proper aspect ratio\n  coord_sf(datum = NA)\n\n\n\n\n\n\n\n# Average prices by property type\nairbnb_joined_clean %&gt;%\n  group_by(property_type) %&gt;%\n  summarize(mean_price = mean(price.x, na.rm = TRUE)) %&gt;%\n  ggplot(aes(x = property_type, y = mean_price)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Mean Price of Listings by Property Type\", x = \"Neighborhood\", y = \"Mean Price\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))+\n  coord_flip()\n\n\n\n\n\n\n\n# Average prices by days and months\nairbnb_joined_clean %&gt;%\n  group_by(day_of_week, month) %&gt;%\n  summarize(mean_price = mean(price.x, na.rm = TRUE)) %&gt;%\n  ggplot(aes(x = day_of_week, y = mean_price)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Mean Price of Listings by Days and Months\", x = \"Neighborhood\", y = \"Mean Price\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))+\n  coord_flip() +\n  facet_wrap(~ month)\n\n\n\n\n\n\n\n\nFrom the charts and maps, we can see that our exploratory data analysis reveals several key patterns in Amsterdam’s Airbnb pricing dynamics. The correlation analysis shows that physical property characteristics have the strongest relationship with listing prices, with accommodation capacity (0.58), number of bedrooms (0.56), and bathroom count (0.43) showing moderate to strong positive correlations. Interestingly, review scores demonstrate surprisingly weak correlations with price (all below 0.3), suggesting that guest ratings have minimal impact on hosts’ pricing decisions. These relationships are further validated in our scatter plots, which show clear positive trends for physical characteristics but relatively flat relationships for review metrics.\nSpatial analysis through our neighborhood map visualization uncovers significant geographic variation in pricing patterns. Central Amsterdam neighborhoods, particularly Centrum-West and Centrum-Oost, consistently command premium prices, while peripheral areas such as Noord-Oost and the Bijlmer regions show notably lower average prices. This clear spatial pattern emphasizes the crucial role of location in determining Airbnb pricing strategies. Property type analysis reveals interesting market segmentation, with unique accommodations like lighthouses commanding the highest average prices (approximately €800), followed by serviced apartments (around €400) significantly outpricing standard apartments (about €200). Traditional properties such as regular apartments and houses cluster in the mid-price range, while smaller units like tiny houses and guesthouses consistently show lower price points.\nThese findings suggest that Amsterdam’s Airbnb pricing is primarily driven by three key factors: physical property characteristics, location centrality, and property uniqueness. Surprisingly, quality metrics as measured by guest reviews appear to play a lesser role in price determination. This understanding provides valuable insights for our subsequent feature engineering and modeling approaches, suggesting that focusing on physical and locational attributes might yield more predictive power than guest satisfaction metrics.",
    "crumbs": [
      "Amsterdam’s Airbnb Prices Predictor"
    ]
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#key-location-features-we-analyzed",
    "href": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#key-location-features-we-analyzed",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "Key Location Features We Analyzed",
    "text": "Key Location Features We Analyzed\nFirst, we have to think about this question: What Makes an Airbnb Attractive?\nDrawing from the rich open data provided by the Municipality of Amsterdam (maps.amsterdam.nl/open_geodata/), we delved deeper into what makes certain locations more appealing to guests. After all, your property’s value isn’t just about the space itself – it’s about the entire guest experience, from convenient transportation to feeling safe walking home at night.\nTransportation Accessibility\nWe measured how close properties are to tram and metro lines using a sophisticated k-nearest neighbor analysis (looking at the 1-5 closest stops). Our findings confirm what many hosts already know: properties closer to public transportation command higher prices. For every additional minute of walking distance to transport, we observed a gradual decrease in nightly rates.\nSafety and Lighting\nUsing detailed street lighting data, we analyzed the number of public lights within 165 feet (about a half block) of each property. Properties in well-lit areas tend to command slightly higher prices – a feature particularly valuable for guests who prioritize safety and comfort during evening hours.\nGreen Spaces\nWe calculated each property’s distance to the nearest park, recognizing that access to Amsterdam’s beautiful green spaces adds value to a visitor’s experience. Interestingly, while proximity to parks shows a positive correlation with prices, the effect is nuanced – suggesting that being near a park is just one of many factors guests consider.\nLocal Markets and Culture\nAmsterdam’s famous outdoor markets are more than just shopping destinations – they’re cultural landmarks. Our analysis tracked distances to these markets, revealing that properties within easy walking distance often achieve higher nightly rates. This reflects guests’ desire to experience local culture and have easy access to fresh food and unique shopping experiences.\nTourist Attractions\nWe mapped distances to major tourist attractions, finding that properties closer to these hotspots generally command premium prices. However, the relationship isn’t simply linear – some guests prefer being close enough to visit attractions easily while staying in quieter, more residential areas.\n\n# Tram and metro lines in Amsterdam\ntram_metro_19&lt;-st_read(\"https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=TRAMMETRO_PUNTEN_2019&THEMA=trammetro\")\n\n# Public lighting\npublic_lighting&lt;-st_read(\"https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=LICHTPUNTEN&THEMA=lichtpunten\") %&gt;%\n  dplyr::select(geometry)\n\n# Attraction 1: Parks\npark&lt;-st_read(\"https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=PARKPLANTSOENGROEN&THEMA=stadsparken\")\n\n# Attraction 2: Outdoor Markets\noutdoor_markets&lt;-st_read(\"https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=MARKTEN_AMBULANT&THEMA=markten\")\n\n# Attraction 3: Tourist Attractions\ntourist_attraction&lt;-st_read(\"https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=HISTORISCHE_BEBOUWING&THEMA=archeologie\")\n\n\nlistings.sf&lt;- st_as_sf(listings, coords = c(\"longitude\", \"latitude\"), crs = 4326)\n\n# Tram and metro lines in Amsterdam (k-nearest neighbor)\nlistings.sf &lt;-\n  listings.sf %&gt;% \n    mutate(\n      tpt_nn1 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tram_metro_19), k = 1),\n      \n      tpt_nn2 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tram_metro_19), k = 2), \n      \n      tpt_nn3 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tram_metro_19), k = 3), \n      \n      tpt_nn4 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tram_metro_19), k = 4), \n      \n      tpt_nn5 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tram_metro_19), k = 5))\n\n# Public lighting (buffer)\nlistings.sf$light.Buffer &lt;- listings.sf %&gt;%\n    st_buffer(165) %&gt;% #feet\n    aggregate(mutate(public_lighting, counter = 1),., sum) %&gt;%\n    pull(counter) %&gt;% \n  replace_na(0)\n\n# Attraction 1: Parks (nearest distance)\nlistings.sf$park.dist &lt;- as.numeric(st_distance(listings.sf, st_union(park)))\n\n# Attraction 2: Outdoor Markets (k-nearest neighbor)\nlistings.sf &lt;-\n  listings.sf %&gt;% \n    mutate(\n      mkt_nn1 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(outdoor_markets), k = 1),\n      \n      mkt_nn2 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(outdoor_markets), k = 2), \n      \n      mkt_nn3 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(outdoor_markets), k = 3), \n      \n      mkt_nn4 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(outdoor_markets), k = 4), \n      \n      mkt_nn5 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(outdoor_markets), k = 5))\n\n# Attraction 3: Tourist Attractions (k-nearest neighbor)\nlistings.sf &lt;-\n  listings.sf %&gt;% \n    mutate(\n      tour_nn1 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tourist_attraction), k = 1),\n      \n      tour_nn2 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tourist_attraction), k = 2), \n      \n      tour_nn3 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tourist_attraction), k = 3), \n      \n      tour_nn4 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tourist_attraction), k = 4), \n      \n      tour_nn5 = nn_function(st_coordinates(listings.sf), \n                              st_coordinates(tourist_attraction), k = 5))\n\n\ncol1 &lt;- listings.sf %&gt;%\n  st_drop_geometry() %&gt;%\n  dplyr::select(id,starts_with(\"tpt_\"), park.dist, light.Buffer, starts_with(\"mkt_\"), starts_with(\"tour_\"))\n\nairbnb_joined_clean_sf &lt;- merge(airbnb_joined_clean_sf, col1, by.x = \"listing_id\", by.y = \"id\")",
    "crumbs": [
      "Amsterdam’s Airbnb Prices Predictor"
    ]
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#what-this-means-for-hosts",
    "href": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#what-this-means-for-hosts",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "What This Means for Hosts",
    "text": "What This Means for Hosts\nWhile our statistical analysis showed relatively modest correlations between these features and prices, real-world experience and existing research suggest they do matter to guests. The key takeaways for hosts:\n\nTransport Proximity: Properties within a 5-10 minute walk of public transport tend to perform better\nSafety First: Well-lit neighborhoods can justify slightly higher rates\nGreen Appeal: Access to parks can be a valuable selling point, especially for longer stays\nLocal Experience: Proximity to markets and cultural spots can differentiate your listing\nTourist-Friendly: Being near attractions allows for premium pricing, but consider highlighting the perfect balance of accessibility and quiet your location offers",
    "crumbs": [
      "Amsterdam’s Airbnb Prices Predictor"
    ]
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#initial-variable-selection",
    "href": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#initial-variable-selection",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "Initial Variable Selection",
    "text": "Initial Variable Selection\nTemporal Variables:\n\nDay of week\nWeekend/weekday binary\nMonthly seasonality\n\nProperty Characteristics:\n\nNeighborhood classification\nProperty type\nAccommodation capacity\nBathroom count\nBedroom count\nMinimum nights requirement\n\nSpatial Features:\n\nTransport accessibility (tpt_1, tpt_2, tpt_3, tpt_4, tpt_5)\nMarket proximity (mkt_1, mkt_2, mkt_3, mkt_4, mkt_5)\nTourist attraction density (tour_nn1, tour_nn2, tour_nn3, tour_nn4, tour_nn5)\nPark distance (park.dist)\nStreet lighting density within 165ft buffer (light.Buffer)\n\nTwo crucial variable exclusions shaped our modeling approach:\n\nReview Metrics: Excluded due to the inherent cold-start problem for new listings. This omission acknowledges that new hosts need pricing guidance before accumulating reviews.\nDate Variables: Removed in favor of cyclical temporal indicators (day of week, month) to capture recurring patterns rather than specific temporal events.",
    "crumbs": [
      "Amsterdam’s Airbnb Prices Predictor"
    ]
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#model-refinement",
    "href": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#model-refinement",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "Model Refinement",
    "text": "Model Refinement\nWe employed stepwise regression with AIC as our selection criterion to optimize the model specification. This approach systematically evaluates the marginal contribution of each predictor, yielding a more parsimonious final model while maintaining predictive power.",
    "crumbs": [
      "Amsterdam’s Airbnb Prices Predictor"
    ]
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#final-model-specification",
    "href": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#final-model-specification",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "Final Model Specification",
    "text": "Final Model Specification\nThe stepwise selection retained most of our initial variables with some refinement in the k-nearest neighbor terms:\nTemporal and Core Features:\n\nDay of week and monthly indicators\nNeighborhood effects\nProperty characteristics\nMinimum stay requirements\n\nRefined Spatial Metrics:\n\nTransport proximity (tpt_1, tpt_2, tpt_3, tpt_4)\nMarket accessibility (mkt_1, mkt_3, mkt_4)\nTourist attraction proximity (tour_nn1, tour_nn2, tour_nn3, tour_nn4, tour_nn5)\nPark distance (park.dist)\nLocal lighting density (light.Buffer)\n\n\n# Omit NA values from reviews\n#airbnb_joined_clean_sf &lt;- airbnb_joined_clean_sf %&gt;%\n#  filter(!if_any(starts_with(\"review_scores_\"), is.na)) # Remove NA so that AIC model can run (if i include review_scores in the equation. But also dont make sense since new host dont have info on review)\n\nset.seed(123)\n# Split data set\ninTrain &lt;- createDataPartition(\n              y = paste(airbnb_joined_clean_sf$neighbourhood_cleansed, \n                        airbnb_joined_clean_sf$property_type,\n                        airbnb_joined_clean_sf$minimum_nights), \n              p = .60, list = FALSE)\n\n\nairbnb.training &lt;- airbnb_joined_clean_sf[inTrain,] \nairbnb.test &lt;- airbnb_joined_clean_sf[-inTrain,] \n\n# Regression model\nreg&lt;-lm(price.x ~ ., data = as.data.frame(airbnb.training) %&gt;% \n                             dplyr::select(price.x,\n                                           day_of_week,\n                                           weekend,\n                                           month,\n                                           neighbourhood_cleansed,\n                                           property_type,\n                                           accommodates,\n                                           bathrooms,\n                                           bedrooms,\n                                           minimum_nights,\n                                           starts_with(\"tpt_\"),\n                                           starts_with(\"mkt_\"),\n                                           starts_with(\"tour_\"),\n                                           park.dist,\n                                           light.Buffer))\nsummary(reg)\n\n# Stepwise regression to remove unimportant variables\nstep &lt;- stepAIC(reg, direction=\"both\")\nstep$anova\n\n# New regression model\nreg2&lt;- lm(price.x ~ day_of_week + month + neighbourhood_cleansed + property_type + accommodates + \n    bathrooms + bedrooms + minimum_nights + tpt_nn1 + tpt_nn2 + \n    tpt_nn3 + tpt_nn4 + mkt_nn1 + mkt_nn3 + mkt_nn4 + \n    tour_nn1 + tour_nn2 + tour_nn3 + tour_nn4 + tour_nn5 + park.dist + \n    light.Buffer, data = as.data.frame(airbnb.training)) # The AIC Model\n\nreg2$coefficients[\"(Intercept)\"] &lt;- reg2$coefficients[\"(Intercept)\"]\n\nsummary(reg2)\n\n# Prediction\nairbnb.test &lt;-\n  airbnb.test %&gt;%\n  mutate(Regression = \"Baseline Regression\",\n         Price.Predict = predict(reg2, airbnb.test),\n         Price.Error = Price.Predict - price.x,\n         Price.AbsError = abs(Price.Predict - price.x),\n         Price.APE = (abs(Price.Predict - price.x)) / price.x)",
    "crumbs": [
      "Amsterdam’s Airbnb Prices Predictor"
    ]
  },
  {
    "objectID": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#validation-accuracy-and-generalizability",
    "href": "MUSA-5080-Final-Project/MUSA5080_Final_Project.html#validation-accuracy-and-generalizability",
    "title": "Smart Listing: Optimizing Airbnb Pricing in Amsterdam’s Regulated Market",
    "section": "Validation: Accuracy and Generalizability",
    "text": "Validation: Accuracy and Generalizability\nFor a pricing model to be truly valuable in Amsterdam’s dynamic Airbnb market, it needs to be both accurate and generalizable. Accuracy ensures hosts can trust the day-to-day pricing recommendations, while generalizability ensures the model remains reliable across different seasons, neighborhoods, and market conditions.\n\n# MAE (Accuracy)\nmean(airbnb.test$Price.AbsError, na.rm = T)\n\n[1] 58.05745\n\nggplot(airbnb.test, aes(x = Price.AbsError)) +\n  geom_histogram(binwidth = 0.5, fill = \"blue\", color = \"orange\") +\n  labs(title = \"Histogram of Absolute Error\", x = \"Value\", y = \"Frequency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# MAPE (Accuracy)\nmean(airbnb.test$Price.APE, na.rm = T)\n\n[1] 0.3603723\n\n# Cross-validation (Generalizability)\nfitControl &lt;- trainControl(method = \"cv\", number = 100)\nset.seed(825)\n\nreg.cv &lt;- \n  train(price.x ~ ., data = st_drop_geometry(airbnb_joined_clean_sf) %&gt;% \n                                dplyr::select(price.x, \n                                day_of_week, month, neighbourhood_cleansed, property_type, accommodates, bathrooms, bedrooms,\n                                minimum_nights, tpt_nn1, tpt_nn2, tpt_nn3, tpt_nn4, mkt_nn1, mkt_nn3, mkt_nn4, tour_nn1,\n                                tour_nn2, tour_nn3, tour_nn4, tour_nn5, park.dist,light.Buffer), \n     method = \"lm\", trControl = fitControl, na.action = na.pass)\n\nmean(reg.cv$resample[,3])\n\n[1] 58.22711\n\nsd(reg.cv$resample[,3])\n\n[1] 1.332825\n\nreg.cv.df &lt;- data.frame(MAE=reg.cv$resample[,3])\n\nggplot(reg.cv.df, aes(x = MAE)) +\n  geom_histogram(binwidth = 0.5, fill = \"#83A598\") +\n  labs(title = \"Distribution of MAE\", subtitle = \"k-fold cross validation; k=100\", x = \"Value\", y = \"Count\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nMeasuring Prediction Accuracy\nTo assess our model’s performance, we examined both absolute and relative prediction accuracy. Our model achieved an MAE of 58.06, meaning that, on average, predictions deviate from actual prices by €58. The MAPE of 0.36 (36.0%) provides a relative view of this accuracy. While these metrics might suggest moderate accuracy, they’re reasonable given Amsterdam’s wide range of listing prices and the inherent volatility of short-term rental markets.\n\n\nTesting Generalizability\nWhile accuracy on known data is important, we’re particularly interested in how well our model performs on new, unseen data. To rigorously test this, we employed k-fold cross-validation with k=100, essentially testing our model 100 times on different subsets of our data.\nThe standard deviation of MAE across all 100 folds is remarkably low at 1.33, indicating strong model stability. This small variation suggests that our model’s performance is consistent across different subsets of the data, a crucial characteristic for reliable price predictions.\nWhy This Matters?\nThe balance between accuracy and generalizability is crucial for our use case. Hosts need reliable pricing guidance that works not just for today’s market but remains valid as conditions change. Our model’s moderate accuracy means it can provide realistic price ranges, while its strong generalizability ensures these recommendations remain reliable across different market conditions, seasons, and neighborhoods. This combination makes it a practical tool for both new hosts setting initial prices and experienced hosts adjusting their strategies throughout the year.\n\n\nExamining spatial variations\n\n# Predicted price as a function of observed price\nairbnb.test %&gt;%\n  dplyr::select(price.x, Price.Predict) %&gt;%\n  ggplot(aes(price.x, Price.Predict)) +\n  geom_point() +\n  stat_smooth(aes(price.x, price.x), \n             method = \"lm\", se = FALSE, size = 1, \n             colour = \"#FA7800\", linetype = \"dashed\") +  # Added dashed line\n  stat_smooth(aes(Price.Predict, price.x), \n              method = \"lm\", se = FALSE, size = 1, \n              colour = \"#83A598\") +\n  labs(title = \"Predicted airbnb price as a function of observed price\",\n       subtitle = \"Orange dashed line represents a perfect prediction; Green line represents prediction\") +\n  plotTheme()\n\n\n\n\n\n\n\n\nThe scatter plot compares our model’s predicted Airbnb prices with the actual observed prices, using an orange diagonal line to represent perfect predictions and a green line to show our model’s actual predictions.\nThe closeness of the green line to the orange dash line suggests reasonable overall prediction accuracy in our model. We observe different patterns across price ranges: for lower-priced properties (0-300€), the model performs well with predictions tightly clustered around the prediction line; in the mid-range (300-600€), we see more scatter but predictions still follow the general trend; for higher-priced properties (600€+), the model tends to underpredict, with more points falling below the perfect prediction line.\nNotably, the spread of points increases with price, indicating better model accuracy for lower-priced properties, while the model tends to underestimate very high prices (900€+). The visualization also shows that our model avoids extreme predictions, staying within reasonable price ranges. Overall, this suggests that while our model performs well for typical Amsterdam Airbnb prices, it might need refinement for luxury or premium properties.\n\n\nExamining Spatial Autocorrelation in Model Errors\nMoran’s I\nMoran’s I is a measure that tells us how similar or different our model’s prediction errors are across Amsterdam’s neighborhoods. We use it to check if our errors show any geographic patterns – in other words, are we consistently over- or under-predicting prices in certain areas of the city? If Moran’s I reveals strong patterns, it suggests our model might be missing important neighborhood-specific factors that influence pricing.\n\ncoords &lt;- jitter(st_coordinates(airbnb_joined_clean_sf),0.0001)\nneighborList &lt;- knn2nb(knearneigh(coords, 5))\nspatialWeights &lt;- nb2listw(neighborList, style=\"W\")\nairbnb_joined_clean_sf$lagPrice &lt;- lag.listw(spatialWeights, airbnb_joined_clean_sf$price.x)\n\nairbnb.test2 &lt;- airbnb.test %&gt;% na.omit() #Remove NA values\n\ncoords.test &lt;-  jitter(st_coordinates(airbnb.test2))\nneighborList.test &lt;- knn2nb(knearneigh(coords.test, 5))\nspatialWeights.test &lt;- nb2listw(neighborList.test, style=\"W\")\n\n\nmoranTest &lt;- moran.mc(airbnb.test2$Price.Error, \n                      spatialWeights.test, nsim = 999)\n\nggplot(as.data.frame(moranTest$res[c(1:999)]), aes(moranTest$res[c(1:999)])) +\n  geom_histogram(binwidth = 0.01) +\n  geom_vline(aes(xintercept = moranTest$statistic), colour = \"orange\",linewidth=1) +\n  scale_x_continuous(limits = c(-0.3, 0.3)) +\n  labs(title=\"Observed and permuted Moran's I\",\n       subtitle= \"Observed Moran's I in orange\",\n       x=\"Moran's I\",\n       y=\"Count\") +\n  theme_minimal() + \n  theme(plot.title = element_text(size=12, face=\"bold\"),\n        plot.subtitle = element_text(size=10),\n        panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\nIn our analysis, we observed a Moran’s I value of 0.273 with a p-value of 0.001. Looking at the visualization, the orange line represents our observed Moran’s I statistic, while the black bars show the distribution of what we’d expect if the errors were randomly distributed across Amsterdam. The fact that our orange line sits notably to the right of this distribution tells us something important: our prediction errors aren’t random across the city – they show significant positive spatial autocorrelation.\nThis clustering of errors suggests that when our model over- or under-predicts a property’s price, nearby properties are likely to have similar prediction errors. While the magnitude (0.273) indicates moderate spatial autocorrelation, the highly significant p-value (0.001) confirms that this pattern isn’t due to chance. This insight points to an opportunity to improve our model by incorporating additional neighborhood-specific features that might capture these spatial patterns more effectively.\nSpatial Lag of Airbnb Price Error\nThe spatial lag scatter plot provides another way to understand how our model’s prediction errors are related across space. The plot shows each property’s prediction error against the average error of its neighboring properties (the spatial lag). This helps us visualize whether properties with high or low prediction errors tend to be near other properties with similar errors.\n\nairbnb.test2 &lt;- airbnb.test2 %&gt;% \n  mutate(lagPriceError = lag.listw(spatialWeights.test, Price.Error))\n\nggplot(data = airbnb.test2)+\n  geom_point(aes(x =lagPriceError, y =Price.Error)) +\n  scale_y_continuous(label = scales::comma) +\n  scale_x_continuous(label = scales::comma) +\n  labs(title = \"Spatial lag of Airbnb Price Error\",\n       x = \"Lag of airbnb price error\",\n       y = \"Airbnb error\") +\n  theme_minimal() + \n  theme(plot.title = element_text(size=12, face=\"bold\"),\n        panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\nLooking at our scatter plot, we observe several key patterns:\n\nThe majority of points cluster around the center (0,0), indicating that many properties have relatively small prediction errors that don’t show strong spatial patterns\nThere’s a visible positive correlation between errors and their spatial lags, shown by the general upward trend of points from lower left to upper right\nWe see some distinct horizontal bands in the error distribution, particularly around -500 and 0, suggesting certain price ranges where our model consistently over- or under-predicts\n\nThis pattern reinforces our Moran’s I findings (0.273) by visually demonstrating that prediction errors aren’t randomly distributed across space. When we over-predict a property’s price, we’re likely to over-predict its neighbors’ prices too. This spatial clustering of errors suggests our model could be improved by:\n\nAdding more detailed neighborhood-level variables\nIncorporating interaction effects between spatial features\nConsidering non-linear relationships in our spatial variables",
    "crumbs": [
      "Amsterdam’s Airbnb Prices Predictor"
    ]
  }
]